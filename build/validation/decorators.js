"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.url=exports.email=exports.pattern=exports.maxlength=exports.minlength=exports.max=exports.min=exports.required=exports.getValidationKey=void 0,require("reflect-metadata");var constants_1=require("./constants"),getValidationKey=function(t){return constants_1.ValidationKeys.REFLECT+t};exports.getValidationKey=getValidationKey;var required=function(n){return void 0===n&&(n=constants_1.DEFAULT_ERROR_MESSAGES.REQUIRED),function(t,e){Reflect.defineMetadata(exports.getValidationKey(constants_1.ValidationKeys.REQUIRED),{message:n},t,e)}};exports.required=required;var min=function(n,a){return void 0===a&&(a=constants_1.DEFAULT_ERROR_MESSAGES.MIN),function(t,e){Reflect.defineMetadata(exports.getValidationKey(constants_1.ValidationKeys.MIN),{value:n,message:a},t,e)}};exports.min=min;var max=function(n,a){return void 0===a&&(a=constants_1.DEFAULT_ERROR_MESSAGES.MAX),function(t,e){Reflect.defineMetadata(exports.getValidationKey(constants_1.ValidationKeys.MAX),{value:n,message:a},t,e)}};exports.max=max;var minlength=function(n,a){return void 0===a&&(a=constants_1.DEFAULT_ERROR_MESSAGES.MIN_LENGTH),function(t,e){Reflect.defineMetadata(exports.getValidationKey(constants_1.ValidationKeys.MIN_LENGTH),{value:n,message:a},t,e)}};exports.minlength=minlength;var maxlength=function(n,a){return void 0===a&&(a=constants_1.DEFAULT_ERROR_MESSAGES.MAX_LENGTH),function(t,e){Reflect.defineMetadata(exports.getValidationKey(constants_1.ValidationKeys.MAX_LENGTH),{value:n,message:a},t,e)}};exports.maxlength=maxlength;var pattern=function(n,a){return void 0===a&&(a=constants_1.DEFAULT_ERROR_MESSAGES.PATTERN),function(t,e){Reflect.defineMetadata(exports.getValidationKey(constants_1.ValidationKeys.PATTERN),{value:"string"==typeof n?n:n.toString(),message:a},t,e)}};exports.pattern=pattern;var email=function(n){return void 0===n&&(n=constants_1.DEFAULT_ERROR_MESSAGES.EMAIL),function(t,e){Reflect.defineMetadata(exports.getValidationKey(constants_1.ValidationKeys.EMAIL),{message:n},t,e)}};exports.email=email;var url=function(n){return void 0===n&&(n=constants_1.DEFAULT_ERROR_MESSAGES.URL),function(t,e){Reflect.defineMetadata(exports.getValidationKey(constants_1.ValidationKeys.URL),{message:n},t,e)}};exports.url=url;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
