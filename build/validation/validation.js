"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(t,r,e,a){void 0===a&&(a=e),Object.defineProperty(t,a,{enumerable:!0,get:function(){return r[e]}})}:function(t,r,e,a){t[a=void 0===a?e:a]=r[e]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(t,r){Object.defineProperty(t,"default",{enumerable:!0,value:r})}:function(t,r){t.default=r}),__importStar=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var r={};if(null!=t)for(var e in t)"default"!==e&&Object.prototype.hasOwnProperty.call(t,e)&&__createBinding(r,t,e);return __setModuleDefault(r,t),r},__spreadArray=this&&this.__spreadArray||function(t,r){for(var e=0,a=r.length,i=t.length;e<a;e++,i++)t[i]=r[e];return t},__importDefault=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.validate=exports.ValidatorRegistry=void 0;var utils_1=require("../utils"),Validators=__importStar(require("./Validators")),constants_1=require("./constants"),Validator_1=__importDefault(require("./Validators/Validator"));function ValRegistry(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var e=new function(){var e={};this.register=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];t.forEach(function(t){t instanceof Validator_1.default?e[t.validationKey]=t:(t=new(t.default||t),e[t.validationKey]=t)})},this.getValidator=function(t){if(t in e)return e[t]}};return e.register.apply(e,t),e}function validate(o){var t,r=[];for(t in o)o.hasOwnProperty(t)&&r.push(utils_1.getPropertyDecorators(constants_1.ValidationKeys.REFLECT,o,t));return r.reduce(function(t,a){var i=a.prop,r=a.decorators;if(!r||!r.length)return t;r=r.reduce(function(t,r){var e=exports.ValidatorRegistry.getValidator(r.key);if(!e)throw new Error("Could not find Matching validator for "+r.key+" for property "+String(a.prop));e=e.hasErrors.apply(e,__spreadArray([o[i]],Object.values(r.props)));return e&&((t=t||{})[r.key]=e),t},void 0);return r&&(r={property:a.prop,errors:r},(t=t||[]).push(r)),t},void 0)}exports.ValidatorRegistry=ValRegistry.apply(void 0,Object.values(Validators)),exports.validate=validate;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
