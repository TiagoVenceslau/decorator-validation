"use strict";

var __extends = this && this.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var Validator_1 = __importDefault(require("./Validator"));

var constants_1 = require("../constants");

var MaxLengthValidator = function (_super) {
  __extends(MaxLengthValidator, _super);

  function MaxLengthValidator(message) {
    if (message === void 0) {
      message = constants_1.DEFAULT_ERROR_MESSAGES.MAX_LENGTH;
    }

    return _super.call(this, constants_1.ValidationKeys.MAX_LENGTH, message) || this;
  }

  MaxLengthValidator.prototype.hasErrors = function (value, maxlength, message) {
    if (value === undefined) return;
    return value.length > maxlength ? this.getMessage(message || this.message, maxlength) : undefined;
  };

  return MaxLengthValidator;
}(Validator_1.default);

exports.default = MaxLengthValidator;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZhbGlkYXRpb24vVmFsaWRhdG9ycy9NYXhMZW5ndGhWYWxpZGF0b3IuanMiLCJ2YWxpZGF0aW9uL1ZhbGlkYXRvcnMvTWF4TGVuZ3RoVmFsaWRhdG9yLnRzIl0sIm5hbWVzIjpbIl9fZXh0ZW5kcyIsImV4dGVuZFN0YXRpY3MiLCJkIiwiYiIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQXJyYXkiLCJwIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiVHlwZUVycm9yIiwiU3RyaW5nIiwiX18iLCJjb25zdHJ1Y3RvciIsImNyZWF0ZSIsIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsIl9fZXNNb2R1bGUiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlZhbGlkYXRvcl8xIiwicmVxdWlyZSIsImNvbnN0YW50c18xIiwiTWF4TGVuZ3RoVmFsaWRhdG9yIiwiX3N1cGVyIiwibWVzc2FnZSIsIkRFRkFVTFRfRVJST1JfTUVTU0FHRVMiLCJNQVhfTEVOR1RIIiwiVmFsaWRhdGlvbktleXMiLCJoYXNFcnJvcnMiLCJtYXhsZW5ndGgiLCJ1bmRlZmluZWQiLCJsZW5ndGgiLCJnZXRNZXNzYWdlIiwiZGVmYXVsdCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsSUFBSUEsU0FBUyxHQUFJLFFBQVEsS0FBS0EsU0FBZCxJQUE2QixZQUFZO0FBQ3JELE1BQUlDLGFBQWEsR0FBRyxVQUFVQyxDQUFWLEVBQWFDLENBQWIsRUFBZ0I7QUFDaENGLElBQUFBLGFBQWEsR0FBR0csTUFBTSxDQUFDQyxjQUFQLElBQ1g7QUFBRUMsTUFBQUEsU0FBUyxFQUFFO0FBQWIsaUJBQTZCQyxLQUE3QixJQUFzQyxVQUFVTCxDQUFWLEVBQWFDLENBQWIsRUFBZ0I7QUFBRUQsTUFBQUEsQ0FBQyxDQUFDSSxTQUFGLEdBQWNILENBQWQ7QUFBa0IsS0FEL0QsSUFFWixVQUFVRCxDQUFWLEVBQWFDLENBQWIsRUFBZ0I7QUFBRSxXQUFLLElBQUlLLENBQVQsSUFBY0wsQ0FBZCxFQUFpQixJQUFJQyxNQUFNLENBQUNLLFNBQVAsQ0FBaUJDLGNBQWpCLENBQWdDQyxJQUFoQyxDQUFxQ1IsQ0FBckMsRUFBd0NLLENBQXhDLENBQUosRUFBZ0ROLENBQUMsQ0FBQ00sQ0FBRCxDQUFELEdBQU9MLENBQUMsQ0FBQ0ssQ0FBRCxDQUFSO0FBQWMsS0FGckc7O0FBR0EsV0FBT1AsYUFBYSxDQUFDQyxDQUFELEVBQUlDLENBQUosQ0FBcEI7QUFDSCxHQUxEOztBQU1BLFNBQU8sVUFBVUQsQ0FBVixFQUFhQyxDQUFiLEVBQWdCO0FBQ25CLFFBQUksT0FBT0EsQ0FBUCxLQUFhLFVBQWIsSUFBMkJBLENBQUMsS0FBSyxJQUFyQyxFQUNJLE1BQU0sSUFBSVMsU0FBSixDQUFjLHlCQUF5QkMsTUFBTSxDQUFDVixDQUFELENBQS9CLEdBQXFDLCtCQUFuRCxDQUFOO0FBQ0pGLElBQUFBLGFBQWEsQ0FBQ0MsQ0FBRCxFQUFJQyxDQUFKLENBQWI7O0FBQ0EsYUFBU1csRUFBVCxHQUFjO0FBQUUsV0FBS0MsV0FBTCxHQUFtQmIsQ0FBbkI7QUFBdUI7O0FBQ3ZDQSxJQUFBQSxDQUFDLENBQUNPLFNBQUYsR0FBY04sQ0FBQyxLQUFLLElBQU4sR0FBYUMsTUFBTSxDQUFDWSxNQUFQLENBQWNiLENBQWQsQ0FBYixJQUFpQ1csRUFBRSxDQUFDTCxTQUFILEdBQWVOLENBQUMsQ0FBQ00sU0FBakIsRUFBNEIsSUFBSUssRUFBSixFQUE3RCxDQUFkO0FBQ0gsR0FORDtBQU9ILENBZDJDLEVBQTVDOztBQWVBLElBQUlHLGVBQWUsR0FBSSxRQUFRLEtBQUtBLGVBQWQsSUFBa0MsVUFBVUMsR0FBVixFQUFlO0FBQ25FLFNBQVFBLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxVQUFaLEdBQTBCRCxHQUExQixHQUFnQztBQUFFLGVBQVdBO0FBQWIsR0FBdkM7QUFDSCxDQUZEOztBQUdBZCxNQUFNLENBQUNnQixjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUFFQyxFQUFBQSxLQUFLLEVBQUU7QUFBVCxDQUE3Qzs7QUNsQkEsSUFBQUMsV0FBQSxHQUFBTixlQUFBLENBQUFPLE9BQUEsQ0FBQSxhQUFBLENBQUEsQ0FBQTs7QUFDQSxJQUFBQyxXQUFBLEdBQUFELE9BQUEsQ0FBQSxjQUFBLENBQUE7O0FBU0EsSUFBQUUsa0JBQUEsR0FBQSxVQUFBQyxNQUFBLEVBQUE7QUFBZ0QzQixFQUFBQSxTQUFBLENBQUEwQixrQkFBQSxFQUFBQyxNQUFBLENBQUE7O0FBQzVDLFdBQUFELGtCQUFBLENBQVlFLE9BQVosRUFBK0Q7QUFBbkQsUUFBQUEsT0FBQSxLQUFBLEtBQUEsQ0FBQSxFQUFBO0FBQUFBLE1BQUFBLE9BQUEsR0FBa0JILFdBQUEsQ0FBQUksc0JBQUEsQ0FBdUJDLFVBQXpDO0FBQW1EOztBRGMzRCxXQ2JBSCxNQUFBLENBQUFoQixJQUFBLENBQUEsSUFBQSxFQUFNYyxXQUFBLENBQUFNLGNBQUEsQ0FBZUQsVUFBckIsRUFBaUNGLE9BQWpDLEtBQXlDLElEYXpDO0FDWkg7O0FBRURGLEVBQUFBLGtCQUFBLENBQUFqQixTQUFBLENBQUF1QixTQUFBLEdBQUEsVUFBVVYsS0FBVixFQUF5QlcsU0FBekIsRUFBNENMLE9BQTVDLEVBQTREO0FBQ3hELFFBQUlOLEtBQUssS0FBS1ksU0FBZCxFQUNJO0FBQ0osV0FBT1osS0FBSyxDQUFDYSxNQUFOLEdBQWVGLFNBQWYsR0FBMkIsS0FBS0csVUFBTCxDQUFnQlIsT0FBTyxJQUFJLEtBQUtBLE9BQWhDLEVBQXlDSyxTQUF6QyxDQUEzQixHQUFpRkMsU0FBeEY7QUFDSCxHQUpEOztBQUtKLFNBQUFSLGtCQUFBO0FBVkEsQ0FBQSxDQUFnREgsV0FBQSxDQUFBYyxPQUFoRCxDQUFBOztBRHdCQWhCLE9BQU8sQ0FBQ2dCLE9BQVIsR0FBa0JYLGtCQUFsQiIsImZpbGUiOiJ2YWxpZGF0aW9uL1ZhbGlkYXRvcnMvTWF4TGVuZ3RoVmFsaWRhdG9yLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFZhbGlkYXRvcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL1ZhbGlkYXRvclwiKSk7XG52YXIgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xudmFyIE1heExlbmd0aFZhbGlkYXRvciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE1heExlbmd0aFZhbGlkYXRvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNYXhMZW5ndGhWYWxpZGF0b3IobWVzc2FnZSkge1xuICAgICAgICBpZiAobWVzc2FnZSA9PT0gdm9pZCAwKSB7IG1lc3NhZ2UgPSBjb25zdGFudHNfMS5ERUZBVUxUX0VSUk9SX01FU1NBR0VTLk1BWF9MRU5HVEg7IH1cbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIGNvbnN0YW50c18xLlZhbGlkYXRpb25LZXlzLk1BWF9MRU5HVEgsIG1lc3NhZ2UpIHx8IHRoaXM7XG4gICAgfVxuICAgIE1heExlbmd0aFZhbGlkYXRvci5wcm90b3R5cGUuaGFzRXJyb3JzID0gZnVuY3Rpb24gKHZhbHVlLCBtYXhsZW5ndGgsIG1lc3NhZ2UpIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHJldHVybiB2YWx1ZS5sZW5ndGggPiBtYXhsZW5ndGggPyB0aGlzLmdldE1lc3NhZ2UobWVzc2FnZSB8fCB0aGlzLm1lc3NhZ2UsIG1heGxlbmd0aCkgOiB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICByZXR1cm4gTWF4TGVuZ3RoVmFsaWRhdG9yO1xufShWYWxpZGF0b3JfMS5kZWZhdWx0KSk7XG5leHBvcnRzLmRlZmF1bHQgPSBNYXhMZW5ndGhWYWxpZGF0b3I7IiwiaW1wb3J0IHtFcnJvcnN9IGZyb20gXCIuLi90eXBlc1wiO1xuaW1wb3J0IFZhbGlkYXRvciBmcm9tIFwiLi9WYWxpZGF0b3JcIjtcbmltcG9ydCB7VmFsaWRhdGlvbktleXMsIERFRkFVTFRfRVJST1JfTUVTU0FHRVN9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcblxuLyoqXG4gKiBNYXggTGVuZ3RoIFZhbGlkYXRvclxuICpcbiAqIEBjbGFzcyBNYXhMZW5ndGhWYWxpZGF0b3JcbiAqIEBleHRlbmRzIFZhbGlkYXRvclxuICogQG1lbWJlck9mIFZhbGlkYXRvcnNcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWF4TGVuZ3RoVmFsaWRhdG9yIGV4dGVuZHMgVmFsaWRhdG9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcgPSBERUZBVUxUX0VSUk9SX01FU1NBR0VTLk1BWF9MRU5HVEgpe1xuICAgICAgICBzdXBlcihWYWxpZGF0aW9uS2V5cy5NQVhfTEVOR1RILCBtZXNzYWdlKVxuICAgIH1cblxuICAgIGhhc0Vycm9ycyh2YWx1ZTogc3RyaW5nLCBtYXhsZW5ndGg6IG51bWJlciwgbWVzc2FnZT86IHN0cmluZyk6IEVycm9ycyB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICByZXR1cm4gdmFsdWUubGVuZ3RoID4gbWF4bGVuZ3RoID8gdGhpcy5nZXRNZXNzYWdlKG1lc3NhZ2UgfHwgdGhpcy5tZXNzYWdlLCBtYXhsZW5ndGgpIDogdW5kZWZpbmVkO1xuICAgIH1cbn0iXX0=
