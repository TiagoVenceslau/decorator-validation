"use strict";var __createBinding=Object.create?function(r,t,e,a){void 0===a&&(a=e),Object.defineProperty(r,a,{enumerable:!0,get:function(){return t[e]}})}:function(r,t,e,a){r[a=void 0===a?e:a]=t[e]},__setModuleDefault=Object.create?function(r,t){Object.defineProperty(r,"default",{enumerable:!0,value:t})}:function(r,t){r.default=t},__importStar=function(r){if(r&&r.__esModule)return r;var t={};if(null!=r)for(var e in r)"default"!==e&&Object.prototype.hasOwnProperty.call(r,e)&&__createBinding(t,r,e);return __setModuleDefault(t,r),t},__spreadArray=function(r,t){for(var e=0,a=t.length,o=r.length;e<a;e++,o++)r[o]=t[e];return r},__importDefault=function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.validate=exports.ValidatorRegistry=void 0;var utils_1=require("../utils"),Validators=__importStar(require("./Validators")),constants_1=require("./constants"),Validator_1=__importDefault(require("./Validators/Validator"));function ValRegistry(){for(var r=[],t=0;t<arguments.length;t++)r[t]=arguments[t];var e=new function(){var e={};this.register=function(){for(var r=[],t=0;t<arguments.length;t++)r[t]=arguments[t];r.forEach(function(r){r instanceof Validator_1.default?e[r.validationKey]=r:(r=new(r.default||r),e[r.validationKey]=r)})},this.getValidator=function(r){if(r in e)return e[r]}};return e.register.apply(e,r),e}function validate(i){var r,t=[];for(r in i)i.hasOwnProperty(r)&&t.push(utils_1.getPropertyDecorators(constants_1.ValidationKeys.REFLECT,i,r));return t.reduce(function(r,a){var o=a.prop,t=a.decorators;if(!t||!t.length)return r;t=t.reduce(function(r,t){var e=exports.ValidatorRegistry.getValidator(t.key);if(!e)throw new Error("Could not find Matching validator for "+t.key+" for property "+String(a.prop));e=e.hasErrors.apply(e,__spreadArray([i[o]],Object.values(t.props)));return e&&((r=r||{})[t.key]=e),r},void 0);return t&&(t={property:a.prop,errors:t},(r=r||[]).push(t)),r},void 0)}exports.ValidatorRegistry=ValRegistry.apply(void 0,Object.values(Validators)),exports.validate=validate;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
