"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.url=exports.email=exports.pattern=exports.maxlength=exports.minlength=exports.max=exports.min=exports.required=exports.getValidationKey=void 0,require("reflect-metadata");var constants_1=require("./constants"),getValidationKey=function(t){return constants_1.ValidationKeys.REFLECT+t};exports.getValidationKey=getValidationKey;var required=function(n){return void 0===n&&(n=constants_1.DEFAULT_ERROR_MESSAGES.REQUIRED),function(t,e){Reflect.defineMetadata(exports.getValidationKey(constants_1.ValidationKeys.REQUIRED),{message:n},t,e)}};exports.required=required;var min=function(n,a){return void 0===a&&(a=constants_1.DEFAULT_ERROR_MESSAGES.MIN),function(t,e){Reflect.defineMetadata(exports.getValidationKey(constants_1.ValidationKeys.MIN),{value:n,message:a},t,e)}};exports.min=min;var max=function(n,a){return void 0===a&&(a=constants_1.DEFAULT_ERROR_MESSAGES.MAX),function(t,e){Reflect.defineMetadata(exports.getValidationKey(constants_1.ValidationKeys.MAX),{value:n,message:a},t,e)}};exports.max=max;var minlength=function(n,a){return void 0===a&&(a=constants_1.DEFAULT_ERROR_MESSAGES.MIN_LENGTH),function(t,e){Reflect.defineMetadata(exports.getValidationKey(constants_1.ValidationKeys.MIN_LENGTH),{value:n,message:a},t,e)}};exports.minlength=minlength;var maxlength=function(n,a){return void 0===a&&(a=constants_1.DEFAULT_ERROR_MESSAGES.MAX_LENGTH),function(t,e){Reflect.defineMetadata(exports.getValidationKey(constants_1.ValidationKeys.MAX_LENGTH),{value:n,message:a},t,e)}};exports.maxlength=maxlength;var pattern=function(n,a){return void 0===a&&(a=constants_1.DEFAULT_ERROR_MESSAGES.PATTERN),function(t,e){Reflect.defineMetadata(exports.getValidationKey(constants_1.ValidationKeys.PATTERN),{value:"string"==typeof n?n:n.toString(),message:a},t,e)}};exports.pattern=pattern;var email=function(n){return void 0===n&&(n=constants_1.DEFAULT_ERROR_MESSAGES.EMAIL),function(t,e){Reflect.defineMetadata(exports.getValidationKey(constants_1.ValidationKeys.EMAIL),{message:n},t,e)}};exports.email=email;var url=function(n){return void 0===n&&(n=constants_1.DEFAULT_ERROR_MESSAGES.URL),function(t,e){Reflect.defineMetadata(exports.getValidationKey(constants_1.ValidationKeys.URL),{message:n},t,e)}};exports.url=url;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZhbGlkYXRpb24vZGVjb3JhdG9ycy5qcyIsInZhbGlkYXRpb24vZGVjb3JhdG9ycy50cyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInBhdHRlcm4iLCJtYXhsZW5ndGgiLCJtaW5sZW5ndGgiLCJtYXgiLCJtaW4iLCJyZXF1aXJlZCIsImdldFZhbGlkYXRpb25LZXkiLCJyZXF1aXJlIiwiY29uc3RhbnRzXzEiLCJrZXkiLCJWYWxpZGF0aW9uS2V5cyIsIlJFRkxFQ1QiLCJtZXNzYWdlIiwiREVGQVVMVF9FUlJPUl9NRVNTQUdFUyIsIlJFUVVJUkVEIiwidGFyZ2V0IiwicHJvcGVydHlLZXkiLCJSZWZsZWN0IiwiZGVmaW5lTWV0YWRhdGEiLCJNSU4iLCJNQVgiLCJNSU5fTEVOR1RIIiwiTUFYX0xFTkdUSCIsIlBBVFRFUk4iLCJ0b1N0cmluZyIsImVtYWlsIiwiRU1BSUwiLCJ1cmwiLCJVUkwiXSwibWFwcGluZ3MiOiJhQUNBQSxPQUFPQyxlQUFlQyxRQUFTLGFBQWMsQ0FBRUMsT0FBTyxJQUF0REgsUUFBT0MsSUFBQUEsUUFBZUMsTUFBdEJBLFFBQStCRSxRQUFjRixRQUFBRyxVQUFBSCxRQUFBSSxVQUFBSixRQUFBSyxJQUFBTCxRQUFBTSxJQUFBTixRQUFBTyxTQUFBUCxRQUFBUSxzQkFBQSxFQ0s3Q0MsUUFBQSxvQkFDQSxJQUFBQyxZQUFBRCxRQUFBLGVBV2FELGlCQUFtQixTQUFDRyxHQUFnQixPQUFBRCxZQUFBRSxlQUFlQyxRQUFVRixHQUE3RFgsUUFBQVEsaUJBQWdCQSxpQkFZdEIsSUFBTUQsU0FBVyxTQUFDTyxHQUFzRCxZQUF0RCxJQUFBQSxJQUFBQSxFQUFrQkosWUFBQUssdUJBQXVCQyxVQUFhLFNBQUNDLEVBQWFDLEdBQ3pGQyxRQUFRQyxlQUNKcEIsUUFBQVEsaUJBQWlCRSxZQUFBRSxlQUFlSSxVQUNoQyxDQUNJRixRQUFTQSxHQUViRyxFQUNBQyxLQVBLbEIsUUFBQU8sU0FBUUEsU0FzQmQsSUFBTUQsSUFBTSxTQUFDTCxFQUErQmEsR0FBaUQsWUFBakQsSUFBQUEsSUFBQUEsRUFBa0JKLFlBQUFLLHVCQUF1Qk0sS0FBUSxTQUFDSixFQUFnQkMsR0FDakhDLFFBQVFDLGVBQ0pwQixRQUFBUSxpQkFBaUJFLFlBQUFFLGVBQWVTLEtBQ2hDLENBQ0lwQixNQUFPQSxFQUNQYSxRQUFTQSxHQUViRyxFQUNBQyxLQVJLbEIsUUFBQU0sSUFBR0EsSUF1QlQsSUFBTUQsSUFBTSxTQUFDSixFQUErQmEsR0FBaUQsWUFBakQsSUFBQUEsSUFBQUEsRUFBa0JKLFlBQUFLLHVCQUF1Qk8sS0FBUSxTQUFDTCxFQUFnQkMsR0FDakhDLFFBQVFDLGVBQ0pwQixRQUFBUSxpQkFBaUJFLFlBQUFFLGVBQWVVLEtBQ2hDLENBQ0lyQixNQUFPQSxFQUNQYSxRQUFTQSxHQUViRyxFQUNBQyxLQVJLbEIsUUFBQUssSUFBR0EsSUF1QlQsSUFBTUQsVUFBWSxTQUFDSCxFQUFlYSxHQUF3RCxZQUF4RCxJQUFBQSxJQUFBQSxFQUFrQkosWUFBQUssdUJBQXVCUSxZQUFlLFNBQUNOLEVBQWdCQyxHQUM5R0MsUUFBUUMsZUFDSnBCLFFBQUFRLGlCQUFpQkUsWUFBQUUsZUFBZVcsWUFDaEMsQ0FDSXRCLE1BQU9BLEVBQ1BhLFFBQVNBLEdBRWJHLEVBQ0FDLEtBUktsQixRQUFBSSxVQUFTQSxVQXVCZixJQUFNRCxVQUFZLFNBQUNGLEVBQWVhLEdBQXdELFlBQXhELElBQUFBLElBQUFBLEVBQWtCSixZQUFBSyx1QkFBdUJTLFlBQWUsU0FBQ1AsRUFBZ0JDLEdBQzlHQyxRQUFRQyxlQUNKcEIsUUFBQVEsaUJBQWlCRSxZQUFBRSxlQUFlWSxZQUNoQyxDQUNJdkIsTUFBT0EsRUFDUGEsUUFBU0EsR0FFYkcsRUFDQUMsS0FSS2xCLFFBQUFHLFVBQVNBLFVBdUJmLElBQU1ELFFBQVUsU0FBQ0QsRUFBd0JhLEdBQXFELFlBQXJELElBQUFBLElBQUFBLEVBQWtCSixZQUFBSyx1QkFBdUJVLFNBQVksU0FBQ1IsRUFBZ0JDLEdBQ2xIQyxRQUFRQyxlQUNKcEIsUUFBQVEsaUJBQWlCRSxZQUFBRSxlQUFlYSxTQUNoQyxDQUNJeEIsTUFBd0IsaUJBQVZBLEVBQXFCQSxFQUFRQSxFQUFNeUIsV0FDakRaLFFBQVNBLEdBRWJHLEVBQ0FDLEtBUktsQixRQUFBRSxRQUFPQSxRQXNCYixJQUFNeUIsTUFBUSxTQUFDYixHQUFtRCxZQUFuRCxJQUFBQSxJQUFBQSxFQUFrQkosWUFBQUssdUJBQXVCYSxPQUFVLFNBQUNYLEVBQWdCQyxHQUN0RkMsUUFBUUMsZUFDSnBCLFFBQUFRLGlCQUFpQkUsWUFBQUUsZUFBZWdCLE9BQ2hDLENBQ0lkLFFBQVNBLEdBRWJHLEVBQ0FDLEtBUEtsQixRQUFBMkIsTUFBS0EsTUFxQlgsSUFBTUUsSUFBTSxTQUFDZixHQUFpRCxZQUFqRCxJQUFBQSxJQUFBQSxFQUFrQkosWUFBQUssdUJBQXVCZSxLQUFRLFNBQUNiLEVBQWdCQyxHQUNsRkMsUUFBUUMsZUFDSnBCLFFBQUFRLGlCQUFpQkUsWUFBQUUsZUFBZWtCLEtBQ2hDLENBQ0loQixRQUFTQSxHQUViRyxFQUNBQyxLQVBLbEIsUUFBQTZCLElBQUdBIiwiZmlsZSI6InZhbGlkYXRpb24vZGVjb3JhdG9ycy5taW4uZXNtLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVybCA9IGV4cG9ydHMuZW1haWwgPSBleHBvcnRzLnBhdHRlcm4gPSBleHBvcnRzLm1heGxlbmd0aCA9IGV4cG9ydHMubWlubGVuZ3RoID0gZXhwb3J0cy5tYXggPSBleHBvcnRzLm1pbiA9IGV4cG9ydHMucmVxdWlyZWQgPSBleHBvcnRzLmdldFZhbGlkYXRpb25LZXkgPSB2b2lkIDA7XG5yZXF1aXJlKFwicmVmbGVjdC1tZXRhZGF0YVwiKTtcbnZhciBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKTtcbnZhciBnZXRWYWxpZGF0aW9uS2V5ID0gZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gY29uc3RhbnRzXzEuVmFsaWRhdGlvbktleXMuUkVGTEVDVCArIGtleTsgfTtcbmV4cG9ydHMuZ2V0VmFsaWRhdGlvbktleSA9IGdldFZhbGlkYXRpb25LZXk7XG52YXIgcmVxdWlyZWQgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgIGlmIChtZXNzYWdlID09PSB2b2lkIDApIHsgbWVzc2FnZSA9IGNvbnN0YW50c18xLkRFRkFVTFRfRVJST1JfTUVTU0FHRVMuUkVRVUlSRUQ7IH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICAgICAgUmVmbGVjdC5kZWZpbmVNZXRhZGF0YShleHBvcnRzLmdldFZhbGlkYXRpb25LZXkoY29uc3RhbnRzXzEuVmFsaWRhdGlvbktleXMuUkVRVUlSRUQpLCB7XG4gICAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlXG4gICAgICAgIH0sIHRhcmdldCwgcHJvcGVydHlLZXkpO1xuICAgIH07XG59O1xuZXhwb3J0cy5yZXF1aXJlZCA9IHJlcXVpcmVkO1xudmFyIG1pbiA9IGZ1bmN0aW9uICh2YWx1ZSwgbWVzc2FnZSkge1xuICAgIGlmIChtZXNzYWdlID09PSB2b2lkIDApIHsgbWVzc2FnZSA9IGNvbnN0YW50c18xLkRFRkFVTFRfRVJST1JfTUVTU0FHRVMuTUlOOyB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgICAgIFJlZmxlY3QuZGVmaW5lTWV0YWRhdGEoZXhwb3J0cy5nZXRWYWxpZGF0aW9uS2V5KGNvbnN0YW50c18xLlZhbGlkYXRpb25LZXlzLk1JTiksIHtcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2VcbiAgICAgICAgfSwgdGFyZ2V0LCBwcm9wZXJ0eUtleSk7XG4gICAgfTtcbn07XG5leHBvcnRzLm1pbiA9IG1pbjtcbnZhciBtYXggPSBmdW5jdGlvbiAodmFsdWUsIG1lc3NhZ2UpIHtcbiAgICBpZiAobWVzc2FnZSA9PT0gdm9pZCAwKSB7IG1lc3NhZ2UgPSBjb25zdGFudHNfMS5ERUZBVUxUX0VSUk9SX01FU1NBR0VTLk1BWDsgfVxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgICAgICBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKGV4cG9ydHMuZ2V0VmFsaWRhdGlvbktleShjb25zdGFudHNfMS5WYWxpZGF0aW9uS2V5cy5NQVgpLCB7XG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlXG4gICAgICAgIH0sIHRhcmdldCwgcHJvcGVydHlLZXkpO1xuICAgIH07XG59O1xuZXhwb3J0cy5tYXggPSBtYXg7XG52YXIgbWlubGVuZ3RoID0gZnVuY3Rpb24gKHZhbHVlLCBtZXNzYWdlKSB7XG4gICAgaWYgKG1lc3NhZ2UgPT09IHZvaWQgMCkgeyBtZXNzYWdlID0gY29uc3RhbnRzXzEuREVGQVVMVF9FUlJPUl9NRVNTQUdFUy5NSU5fTEVOR1RIOyB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgICAgIFJlZmxlY3QuZGVmaW5lTWV0YWRhdGEoZXhwb3J0cy5nZXRWYWxpZGF0aW9uS2V5KGNvbnN0YW50c18xLlZhbGlkYXRpb25LZXlzLk1JTl9MRU5HVEgpLCB7XG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlXG4gICAgICAgIH0sIHRhcmdldCwgcHJvcGVydHlLZXkpO1xuICAgIH07XG59O1xuZXhwb3J0cy5taW5sZW5ndGggPSBtaW5sZW5ndGg7XG52YXIgbWF4bGVuZ3RoID0gZnVuY3Rpb24gKHZhbHVlLCBtZXNzYWdlKSB7XG4gICAgaWYgKG1lc3NhZ2UgPT09IHZvaWQgMCkgeyBtZXNzYWdlID0gY29uc3RhbnRzXzEuREVGQVVMVF9FUlJPUl9NRVNTQUdFUy5NQVhfTEVOR1RIOyB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgICAgIFJlZmxlY3QuZGVmaW5lTWV0YWRhdGEoZXhwb3J0cy5nZXRWYWxpZGF0aW9uS2V5KGNvbnN0YW50c18xLlZhbGlkYXRpb25LZXlzLk1BWF9MRU5HVEgpLCB7XG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlXG4gICAgICAgIH0sIHRhcmdldCwgcHJvcGVydHlLZXkpO1xuICAgIH07XG59O1xuZXhwb3J0cy5tYXhsZW5ndGggPSBtYXhsZW5ndGg7XG52YXIgcGF0dGVybiA9IGZ1bmN0aW9uICh2YWx1ZSwgbWVzc2FnZSkge1xuICAgIGlmIChtZXNzYWdlID09PSB2b2lkIDApIHsgbWVzc2FnZSA9IGNvbnN0YW50c18xLkRFRkFVTFRfRVJST1JfTUVTU0FHRVMuUEFUVEVSTjsgfVxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgICAgICBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKGV4cG9ydHMuZ2V0VmFsaWRhdGlvbktleShjb25zdGFudHNfMS5WYWxpZGF0aW9uS2V5cy5QQVRURVJOKSwge1xuICAgICAgICAgICAgdmFsdWU6IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyB2YWx1ZSA6IHZhbHVlLnRvU3RyaW5nKCksXG4gICAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlXG4gICAgICAgIH0sIHRhcmdldCwgcHJvcGVydHlLZXkpO1xuICAgIH07XG59O1xuZXhwb3J0cy5wYXR0ZXJuID0gcGF0dGVybjtcbnZhciBlbWFpbCA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgaWYgKG1lc3NhZ2UgPT09IHZvaWQgMCkgeyBtZXNzYWdlID0gY29uc3RhbnRzXzEuREVGQVVMVF9FUlJPUl9NRVNTQUdFUy5FTUFJTDsgfVxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgICAgICBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKGV4cG9ydHMuZ2V0VmFsaWRhdGlvbktleShjb25zdGFudHNfMS5WYWxpZGF0aW9uS2V5cy5FTUFJTCksIHtcbiAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2VcbiAgICAgICAgfSwgdGFyZ2V0LCBwcm9wZXJ0eUtleSk7XG4gICAgfTtcbn07XG5leHBvcnRzLmVtYWlsID0gZW1haWw7XG52YXIgdXJsID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICBpZiAobWVzc2FnZSA9PT0gdm9pZCAwKSB7IG1lc3NhZ2UgPSBjb25zdGFudHNfMS5ERUZBVUxUX0VSUk9SX01FU1NBR0VTLlVSTDsgfVxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgICAgICBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKGV4cG9ydHMuZ2V0VmFsaWRhdGlvbktleShjb25zdGFudHNfMS5WYWxpZGF0aW9uS2V5cy5VUkwpLCB7XG4gICAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlXG4gICAgICAgIH0sIHRhcmdldCwgcHJvcGVydHlLZXkpO1xuICAgIH07XG59O1xuZXhwb3J0cy51cmwgPSB1cmw7IiwiLyoqXG4gKiBAbmFtZXNwYWNlIERlY29yYXRvcnNcbiAqIEBtZW1iZXJPZiBWYWxpZGF0aW9uXG4gKi9cblxuXG5pbXBvcnQgXCJyZWZsZWN0LW1ldGFkYXRhXCI7XG5pbXBvcnQge1ZhbGlkYXRpb25LZXlzLCBERUZBVUxUX0VSUk9SX01FU1NBR0VTfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcblxuXG5cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gKiBAZnVuY3Rpb25cbiAqIEBuYW1lc3BhY2UgRGVjb3JhdG9yc1xuICogQG1lbWJlck9mIFZhbGlkYXRpb25cbiAqL1xuZXhwb3J0IGNvbnN0IGdldFZhbGlkYXRpb25LZXkgPSAoa2V5OiBzdHJpbmcpID0+IFZhbGlkYXRpb25LZXlzLlJFRkxFQ1QgKyBrZXk7XG5cbi8qKlxuICogTWFya3MgdGhlIHByb3BlcnR5IGFzIHJlcXVpcmVkLlxuICpcbiAqIFZhbGlkYXRvcnMgdG8gdmFsaWRhdGUgYSBkZWNvcmF0ZWQgcHJvcGVydHkgbXVzdCB1c2Uga2V5IHtAbGluayBWYWxpZGF0aW9uS2V5cy5SRVFVSVJFRH1cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gW21lc3NhZ2VdIHRoZSBlcnJvciBtZXNzYWdlLiBEZWZhdWx0cyB0byB7QGxpbmsgREVGQVVMVF9FUlJPUl9NRVNTQUdFUy5SRVFVSVJFRH1cbiAqIEBkZWNvcmF0b3JcbiAqIEBuYW1lc3BhY2UgRGVjb3JhdG9yc1xuICogQG1lbWJlck9mIFZhbGlkYXRpb25cbiAqL1xuZXhwb3J0IGNvbnN0IHJlcXVpcmVkID0gKG1lc3NhZ2U6IHN0cmluZyA9IERFRkFVTFRfRVJST1JfTUVTU0FHRVMuUkVRVUlSRUQpID0+ICh0YXJnZXQ6IGFueSwgcHJvcGVydHlLZXk6IHN0cmluZykgPT4ge1xuICAgIFJlZmxlY3QuZGVmaW5lTWV0YWRhdGEoXG4gICAgICAgIGdldFZhbGlkYXRpb25LZXkoVmFsaWRhdGlvbktleXMuUkVRVUlSRUQpLFxuICAgICAgICB7XG4gICAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlXG4gICAgICAgIH0sXG4gICAgICAgIHRhcmdldCxcbiAgICAgICAgcHJvcGVydHlLZXlcbiAgICApO1xufVxuXG4vKipcbiAqIERlZmluZXMgYSBtaW5pbXVtIHZhbHVlIGZvciB0aGUgcHJvcGVydHlcbiAqXG4gKiBWYWxpZGF0b3JzIHRvIHZhbGlkYXRlIGEgZGVjb3JhdGVkIHByb3BlcnR5IG11c3QgdXNlIGtleSB7QGxpbmsgVmFsaWRhdGlvbktleXMuTUlOfVxuICpcbiAqIEBwYXJhbSB7bnVtYmVyIHwgRGF0ZX0gdmFsdWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBbbWVzc2FnZV0gdGhlIGVycm9yIG1lc3NhZ2UuIERlZmF1bHRzIHRvIHtAbGluayBERUZBVUxUX0VSUk9SX01FU1NBR0VTLk1JTn1cbiAqIEBkZWNvcmF0b3JcbiAqIEBuYW1lc3BhY2UgRGVjb3JhdG9yc1xuICogQG1lbWJlck9mIFZhbGlkYXRpb25cbiAqL1xuZXhwb3J0IGNvbnN0IG1pbiA9ICh2YWx1ZTogbnVtYmVyIHwgRGF0ZSB8IHN0cmluZywgbWVzc2FnZTogc3RyaW5nID0gREVGQVVMVF9FUlJPUl9NRVNTQUdFUy5NSU4pID0+ICh0YXJnZXQ6IE9iamVjdCwgcHJvcGVydHlLZXk6IHN0cmluZykgPT4ge1xuICAgIFJlZmxlY3QuZGVmaW5lTWV0YWRhdGEoXG4gICAgICAgIGdldFZhbGlkYXRpb25LZXkoVmFsaWRhdGlvbktleXMuTUlOKSxcbiAgICAgICAge1xuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgbWVzc2FnZTogbWVzc2FnZVxuICAgICAgICB9LFxuICAgICAgICB0YXJnZXQsXG4gICAgICAgIHByb3BlcnR5S2V5XG4gICAgKTtcbn1cblxuLyoqXG4gKiBEZWZpbmVzIGEgbWF4aW11bSB2YWx1ZSBmb3IgdGhlIHByb3BlcnR5XG4gKlxuICogVmFsaWRhdG9ycyB0byB2YWxpZGF0ZSBhIGRlY29yYXRlZCBwcm9wZXJ0eSBtdXN0IHVzZSBrZXkge0BsaW5rIFZhbGlkYXRpb25LZXlzLk1BWH1cbiAqXG4gKiBAcGFyYW0ge251bWJlciB8IERhdGV9IHZhbHVlXG4gKiBAcGFyYW0ge3N0cmluZ30gW21lc3NhZ2VdIHRoZSBlcnJvciBtZXNzYWdlLiBEZWZhdWx0cyB0byB7QGxpbmsgREVGQVVMVF9FUlJPUl9NRVNTQUdFUy5NQVh9XG4gKiBAZGVjb3JhdG9yXG4gKiBAbmFtZXNwYWNlIERlY29yYXRvcnNcbiAqIEBtZW1iZXJPZiBWYWxpZGF0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBtYXggPSAodmFsdWU6IG51bWJlciB8IERhdGUgfCBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZyA9IERFRkFVTFRfRVJST1JfTUVTU0FHRVMuTUFYKSA9PiAodGFyZ2V0OiBPYmplY3QsIHByb3BlcnR5S2V5OiBzdHJpbmcpID0+IHtcbiAgICBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKFxuICAgICAgICBnZXRWYWxpZGF0aW9uS2V5KFZhbGlkYXRpb25LZXlzLk1BWCksXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2VcbiAgICAgICAgfSxcbiAgICAgICAgdGFyZ2V0LFxuICAgICAgICBwcm9wZXJ0eUtleVxuICAgICk7XG59XG5cbi8qKlxuICogRGVmaW5lcyBhIG1pbmltdW0gbGVuZ3RoIGZvciB0aGUgcHJvcGVydHlcbiAqXG4gKiBWYWxpZGF0b3JzIHRvIHZhbGlkYXRlIGEgZGVjb3JhdGVkIHByb3BlcnR5IG11c3QgdXNlIGtleSB7QGxpbmsgVmFsaWRhdGlvbktleXMuTUlOX0xFTkdUSH1cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBbbWVzc2FnZV0gdGhlIGVycm9yIG1lc3NhZ2UuIERlZmF1bHRzIHRvIHtAbGluayBERUZBVUxUX0VSUk9SX01FU1NBR0VTLk1JTl9MRU5HVEh9XG4gKiBAZGVjb3JhdG9yXG4gKiBAbmFtZXNwYWNlIERlY29yYXRvcnNcbiAqIEBtZW1iZXJPZiBWYWxpZGF0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBtaW5sZW5ndGggPSAodmFsdWU6IG51bWJlciwgbWVzc2FnZTogc3RyaW5nID0gREVGQVVMVF9FUlJPUl9NRVNTQUdFUy5NSU5fTEVOR1RIKSA9PiAodGFyZ2V0OiBPYmplY3QsIHByb3BlcnR5S2V5OiBzdHJpbmcpID0+IHtcbiAgICBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKFxuICAgICAgICBnZXRWYWxpZGF0aW9uS2V5KFZhbGlkYXRpb25LZXlzLk1JTl9MRU5HVEgpLFxuICAgICAgICB7XG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlXG4gICAgICAgIH0sXG4gICAgICAgIHRhcmdldCxcbiAgICAgICAgcHJvcGVydHlLZXlcbiAgICApO1xufVxuXG4vKipcbiAqIERlZmluZXMgYSBtYXhpbXVtIGxlbmd0aCBmb3IgdGhlIHByb3BlcnR5XG4gKlxuICogVmFsaWRhdG9ycyB0byB2YWxpZGF0ZSBhIGRlY29yYXRlZCBwcm9wZXJ0eSBtdXN0IHVzZSBrZXkge0BsaW5rIFZhbGlkYXRpb25LZXlzLk1BWF9MRU5HVEh9XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge3N0cmluZ30gW21lc3NhZ2VdIHRoZSBlcnJvciBtZXNzYWdlLiBEZWZhdWx0cyB0byB7QGxpbmsgREVGQVVMVF9FUlJPUl9NRVNTQUdFUy5NQVhfTEVOR1RIfVxuICogQGRlY29yYXRvclxuICogQG5hbWVzcGFjZSBEZWNvcmF0b3JzXG4gKiBAbWVtYmVyT2YgVmFsaWRhdGlvblxuICovXG5leHBvcnQgY29uc3QgbWF4bGVuZ3RoID0gKHZhbHVlOiBudW1iZXIsIG1lc3NhZ2U6IHN0cmluZyA9IERFRkFVTFRfRVJST1JfTUVTU0FHRVMuTUFYX0xFTkdUSCkgPT4gKHRhcmdldDogT2JqZWN0LCBwcm9wZXJ0eUtleTogc3RyaW5nKSA9PiB7XG4gICAgUmVmbGVjdC5kZWZpbmVNZXRhZGF0YShcbiAgICAgICAgZ2V0VmFsaWRhdGlvbktleShWYWxpZGF0aW9uS2V5cy5NQVhfTEVOR1RIKSxcbiAgICAgICAge1xuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgbWVzc2FnZTogbWVzc2FnZVxuICAgICAgICB9LFxuICAgICAgICB0YXJnZXQsXG4gICAgICAgIHByb3BlcnR5S2V5XG4gICAgKTtcbn1cblxuLyoqXG4gKiBEZWZpbmVzIGEgUmVnRXhwIHBhdHRlcm4gdGhlIHByb3BlcnR5IG11c3QgcmVzcGVjdFxuICpcbiAqIFZhbGlkYXRvcnMgdG8gdmFsaWRhdGUgYSBkZWNvcmF0ZWQgcHJvcGVydHkgbXVzdCB1c2Uga2V5IHtAbGluayBWYWxpZGF0aW9uS2V5cy5QQVRURVJOfVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IFttZXNzYWdlXSB0aGUgZXJyb3IgbWVzc2FnZS4gRGVmYXVsdHMgdG8ge0BsaW5rIERFRkFVTFRfRVJST1JfTUVTU0FHRVMuUEFUVEVSTn1cbiAqIEBkZWNvcmF0b3JcbiAqIEBuYW1lc3BhY2UgRGVjb3JhdG9yc1xuICogQG1lbWJlck9mIFZhbGlkYXRpb25cbiAqL1xuZXhwb3J0IGNvbnN0IHBhdHRlcm4gPSAodmFsdWU6IFJlZ0V4cCB8IHN0cmluZywgbWVzc2FnZTogc3RyaW5nID0gREVGQVVMVF9FUlJPUl9NRVNTQUdFUy5QQVRURVJOKSA9PiAodGFyZ2V0OiBPYmplY3QsIHByb3BlcnR5S2V5OiBzdHJpbmcpID0+IHtcbiAgICBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKFxuICAgICAgICBnZXRWYWxpZGF0aW9uS2V5KFZhbGlkYXRpb25LZXlzLlBBVFRFUk4pLFxuICAgICAgICB7XG4gICAgICAgICAgICB2YWx1ZTogdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IHZhbHVlIDogdmFsdWUudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2VcbiAgICAgICAgfSxcbiAgICAgICAgdGFyZ2V0LFxuICAgICAgICBwcm9wZXJ0eUtleVxuICAgICk7XG59XG5cbi8qKlxuICogRGVmaW5lcyB0aGUgcHJvcGVydHkgYXMgYW4gZW1haWxcbiAqXG4gKiBWYWxpZGF0b3JzIHRvIHZhbGlkYXRlIGEgZGVjb3JhdGVkIHByb3BlcnR5IG11c3QgdXNlIGtleSB7QGxpbmsgVmFsaWRhdGlvbktleXMuRU1BSUx9XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IFttZXNzYWdlXSB0aGUgZXJyb3IgbWVzc2FnZS4gRGVmYXVsdHMgdG8ge0BsaW5rIERFRkFVTFRfRVJST1JfTUVTU0FHRVMuRU1BSUx9XG4gKiBAZGVjb3JhdG9yXG4gKiBAbmFtZXNwYWNlIERlY29yYXRvcnNcbiAqIEBtZW1iZXJPZiBWYWxpZGF0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBlbWFpbCA9IChtZXNzYWdlOiBzdHJpbmcgPSBERUZBVUxUX0VSUk9SX01FU1NBR0VTLkVNQUlMKSA9PiAodGFyZ2V0OiBPYmplY3QsIHByb3BlcnR5S2V5OiBzdHJpbmcpID0+IHtcbiAgICBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKFxuICAgICAgICBnZXRWYWxpZGF0aW9uS2V5KFZhbGlkYXRpb25LZXlzLkVNQUlMKSxcbiAgICAgICAge1xuICAgICAgICAgICAgbWVzc2FnZTogbWVzc2FnZVxuICAgICAgICB9LFxuICAgICAgICB0YXJnZXQsXG4gICAgICAgIHByb3BlcnR5S2V5XG4gICAgKTtcbn1cblxuLyoqXG4gKiBEZWZpbmVzIHRoZSBwcm9wZXJ0eSBhcyBhbiBVUkxcbiAqXG4gKiBWYWxpZGF0b3JzIHRvIHZhbGlkYXRlIGEgZGVjb3JhdGVkIHByb3BlcnR5IG11c3QgdXNlIGtleSB7QGxpbmsgVmFsaWRhdGlvbktleXMuVVJMfVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBbbWVzc2FnZV0gdGhlIGVycm9yIG1lc3NhZ2UuIERlZmF1bHRzIHRvIHtAbGluayBERUZBVUxUX0VSUk9SX01FU1NBR0VTLlVSTH1cbiAqIEBkZWNvcmF0b3JcbiAqIEBuYW1lc3BhY2UgRGVjb3JhdG9yc1xuICogQG1lbWJlck9mIFZhbGlkYXRpb25cbiAqL1xuZXhwb3J0IGNvbnN0IHVybCA9IChtZXNzYWdlOiBzdHJpbmcgPSBERUZBVUxUX0VSUk9SX01FU1NBR0VTLlVSTCkgPT4gKHRhcmdldDogT2JqZWN0LCBwcm9wZXJ0eUtleTogc3RyaW5nKSA9PiB7XG4gICAgUmVmbGVjdC5kZWZpbmVNZXRhZGF0YShcbiAgICAgICAgZ2V0VmFsaWRhdGlvbktleShWYWxpZGF0aW9uS2V5cy5VUkwpLFxuICAgICAgICB7XG4gICAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlXG4gICAgICAgIH0sXG4gICAgICAgIHRhcmdldCxcbiAgICAgICAgcHJvcGVydHlLZXlcbiAgICApO1xufSJdfQ==
