"use strict";var __spreadArray=this&&this.__spreadArray||function(t,r){for(var e=0,n=r.length,o=t.length;e<n;e++,o++)t[o]=r[e];return t};function getPropertyDecorators(e,n,o){var t=Reflect.getMetadataKeys(n,o).filter(function(t){return t.toString().startsWith(e)}).reduce(function(t,r){r={key:r.substring(e.length),props:Reflect.getMetadata(r,n,o)};return t.concat(r)},[]);return{prop:o,decorators:t}}function stringFormat(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];return t.replace(/{(\d+)}/g,function(t,r){return void 0!==e[r]?e[r]:t})}function isEqual(r,e){for(var n=[],t=2;t<arguments.length;t++)n[t-2]=arguments[t];if(r===e)return!0;if(r instanceof Date&&e instanceof Date)return r.getTime()===e.getTime();if(!r||!e||"object"!=typeof r&&"object"!=typeof e)return r===e;if(null==r||null==e)return!1;if(r.prototype!==e.prototype)return!1;var o=Object.keys(r).filter(function(t){return-1===n.indexOf(t)});return o.length===Object.keys(e).filter(function(t){return-1===n.indexOf(t)}).length&&o.every(function(t){return-1!==n.indexOf(t)||isEqual.apply(void 0,__spreadArray([r[t],e[t]],n))})}Object.defineProperty(exports,"__esModule",{value:!0}),exports.isEqual=exports.stringFormat=exports.getPropertyDecorators=void 0,exports.getPropertyDecorators=getPropertyDecorators,exports.stringFormat=stringFormat,exports.isEqual=isEqual;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
