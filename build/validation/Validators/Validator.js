"use strict";

var __spreadArray = this && this.__spreadArray || function (to, from) {
  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];

  return to;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var utils_1 = require("../../utils");

var constants_1 = require("../constants");

var Validator = function () {
  function Validator(validationKey, message) {
    if (message === void 0) {
      message = constants_1.DEFAULT_ERROR_MESSAGES.DEFAULT;
    }

    this.validationKey = validationKey;
    this.message = message;
  }

  Validator.prototype.getMessage = function (message) {
    var args = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      args[_i - 1] = arguments[_i];
    }

    return utils_1.stringFormat.apply(void 0, __spreadArray([message], args));
  };

  return Validator;
}();

exports.default = Validator;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZhbGlkYXRpb24vVmFsaWRhdG9ycy9WYWxpZGF0b3IuanMiLCJ2YWxpZGF0aW9uL1ZhbGlkYXRvcnMvVmFsaWRhdG9yLnRzIl0sIm5hbWVzIjpbIl9fc3ByZWFkQXJyYXkiLCJ0byIsImZyb20iLCJpIiwiaWwiLCJsZW5ndGgiLCJqIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ1dGlsc18xIiwicmVxdWlyZSIsImNvbnN0YW50c18xIiwiVmFsaWRhdG9yIiwidmFsaWRhdGlvbktleSIsIm1lc3NhZ2UiLCJERUZBVUxUX0VSUk9SX01FU1NBR0VTIiwiREVGQVVMVCIsInByb3RvdHlwZSIsImdldE1lc3NhZ2UiLCJhcmdzIiwiX2kiLCJhcmd1bWVudHMiLCJzdHJpbmdGb3JtYXQiLCJhcHBseSIsImRlZmF1bHQiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLElBQUlBLGFBQWEsR0FBSSxRQUFRLEtBQUtBLGFBQWQsSUFBZ0MsVUFBVUMsRUFBVixFQUFjQyxJQUFkLEVBQW9CO0FBQ3BFLE9BQUssSUFBSUMsQ0FBQyxHQUFHLENBQVIsRUFBV0MsRUFBRSxHQUFHRixJQUFJLENBQUNHLE1BQXJCLEVBQTZCQyxDQUFDLEdBQUdMLEVBQUUsQ0FBQ0ksTUFBekMsRUFBaURGLENBQUMsR0FBR0MsRUFBckQsRUFBeURELENBQUMsSUFBSUcsQ0FBQyxFQUEvRCxFQUNJTCxFQUFFLENBQUNLLENBQUQsQ0FBRixHQUFRSixJQUFJLENBQUNDLENBQUQsQ0FBWjs7QUFDSixTQUFPRixFQUFQO0FBQ0gsQ0FKRDs7QUFLQU0sTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUFFQyxFQUFBQSxLQUFLLEVBQUU7QUFBVCxDQUE3Qzs7QUNOQSxJQUFBQyxPQUFBLEdBQUFDLE9BQUEsQ0FBQSxhQUFBLENBQUE7O0FBRUEsSUFBQUMsV0FBQSxHQUFBRCxPQUFBLENBQUEsY0FBQSxDQUFBOztBQVVBLElBQUFFLFNBQUEsR0FBQSxZQUFBO0FBS0ksV0FBQUEsU0FBQSxDQUFzQkMsYUFBdEIsRUFBNkNDLE9BQTdDLEVBQTZGO0FBQWhELFFBQUFBLE9BQUEsS0FBQSxLQUFBLENBQUEsRUFBQTtBQUFBQSxNQUFBQSxPQUFBLEdBQWtCSCxXQUFBLENBQUFJLHNCQUFBLENBQXVCQyxPQUF6QztBQUFnRDs7QUFDekYsU0FBS0gsYUFBTCxHQUFxQkEsYUFBckI7QUFDQSxTQUFLQyxPQUFMLEdBQWVBLE9BQWY7QUFDSDs7QUFFU0YsRUFBQUEsU0FBQSxDQUFBSyxTQUFBLENBQUFDLFVBQUEsR0FBVixVQUFxQkosT0FBckIsRUFBb0M7QUFBRSxRQUFBSyxJQUFBLEdBQUEsRUFBQTs7QURMbEMsU0NLa0MsSUFBQUMsRUFBQSxHQUFBLENETGxDLEVDS2tDQSxFQUFBLEdBQUFDLFNBQUEsQ0FBQWxCLE1ETGxDLEVDS2tDaUIsRUFBQSxFRExsQyxFQ0tnRDtBQUFkRCxNQUFBQSxJQUFBLENBQUFDLEVBQUEsR0FBQSxDQUFBLENBQUEsR0FBQUMsU0FBQSxDQUFBRCxFQUFBLENBQUE7QURIakM7O0FDSUQsV0FBT1gsT0FBQSxDQUFBYSxZQUFBLENBQVlDLEtBQVosQ0FBWSxLQUFBLENBQVosRUFBWXpCLGFBQUEsQ0FBQSxDQUFDZ0IsT0FBRCxDQUFBLEVBQWFLLElBQWIsQ0FBWixDQUFQO0FBQ0gsR0FGUzs7QUFNZCxTQUFBUCxTQUFBO0FBaEJBLENBQUEsRUFBQTs7QURZQUwsT0FBTyxDQUFDaUIsT0FBUixHQUFrQlosU0FBbEIiLCJmaWxlIjoidmFsaWRhdGlvbi9WYWxpZGF0b3JzL1ZhbGlkYXRvci5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fc3ByZWFkQXJyYXkgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXkpIHx8IGZ1bmN0aW9uICh0bywgZnJvbSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGZyb20ubGVuZ3RoLCBqID0gdG8ubGVuZ3RoOyBpIDwgaWw7IGkrKywgaisrKVxuICAgICAgICB0b1tqXSA9IGZyb21baV07XG4gICAgcmV0dXJuIHRvO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB1dGlsc18xID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzXCIpO1xudmFyIGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcbnZhciBWYWxpZGF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFZhbGlkYXRvcih2YWxpZGF0aW9uS2V5LCBtZXNzYWdlKSB7XG4gICAgICAgIGlmIChtZXNzYWdlID09PSB2b2lkIDApIHsgbWVzc2FnZSA9IGNvbnN0YW50c18xLkRFRkFVTFRfRVJST1JfTUVTU0FHRVMuREVGQVVMVDsgfVxuICAgICAgICB0aGlzLnZhbGlkYXRpb25LZXkgPSB2YWxpZGF0aW9uS2V5O1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgIH1cbiAgICBWYWxpZGF0b3IucHJvdG90eXBlLmdldE1lc3NhZ2UgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdXRpbHNfMS5zdHJpbmdGb3JtYXQuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFttZXNzYWdlXSwgYXJncykpO1xuICAgIH07XG4gICAgcmV0dXJuIFZhbGlkYXRvcjtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBWYWxpZGF0b3I7IiwiaW1wb3J0IHtzdHJpbmdGb3JtYXR9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xuaW1wb3J0IFZhbGlkYXRhYmxlLCB7RXJyb3JzfSBmcm9tIFwiLi4vdHlwZXNcIjtcbmltcG9ydCB7REVGQVVMVF9FUlJPUl9NRVNTQUdFU30gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuXG4vKipcbiAqIEJhc2UgSW1wbGVtZW50YXRpb24gZm9yIFZhbGlkYXRvcnNcbiAqXG4gKiBAY2xhc3MgVmFsaWRhdG9yXG4gKiBAYWJzdHJhY3RcbiAqIEBpbXBsZW1lbnRzIFZhbGlkYXRhYmxlXG4gKiBAbWVtYmVyT2YgVmFsaWRhdG9yc1xuICovXG5leHBvcnQgZGVmYXVsdCBhYnN0cmFjdCBjbGFzcyBWYWxpZGF0b3IgaW1wbGVtZW50cyBWYWxpZGF0YWJsZXtcbiAgICByZWFkb25seSB2YWxpZGF0aW9uS2V5OiBzdHJpbmc7XG4gICAgcHJvdGVjdGVkIG1lc3NhZ2U6IHN0cmluZztcblxuXG4gICAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKHZhbGlkYXRpb25LZXk6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nID0gREVGQVVMVF9FUlJPUl9NRVNTQUdFUy5ERUZBVUxUKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdGlvbktleSA9IHZhbGlkYXRpb25LZXk7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldE1lc3NhZ2UobWVzc2FnZTogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSl7XG4gICAgICAgIHJldHVybiBzdHJpbmdGb3JtYXQobWVzc2FnZSwgLi4uYXJncyk7XG4gICAgfVxuXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGFic3RyYWN0IGhhc0Vycm9ycyh2YWx1ZTogYW55LCAuLi5hcmdzOiBhbnlbXSk6IEVycm9ycztcbn0iXX0=
