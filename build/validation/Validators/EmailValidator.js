"use strict";

var __extends = this && this.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var constants_1 = require("../constants");

var PatternValidator_1 = __importDefault(require("./PatternValidator"));

var EmailValidator = function (_super) {
  __extends(EmailValidator, _super);

  function EmailValidator(message) {
    if (message === void 0) {
      message = constants_1.DEFAULT_ERROR_MESSAGES.EMAIL;
    }

    return _super.call(this, constants_1.ValidationKeys.EMAIL, message) || this;
  }

  EmailValidator.prototype.hasErrors = function (value, message) {
    return _super.prototype.hasErrors.call(this, value, EmailValidator.emailPat, message);
  };

  EmailValidator.emailPat = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;
  return EmailValidator;
}(PatternValidator_1.default);

exports.default = EmailValidator;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZhbGlkYXRpb24vVmFsaWRhdG9ycy9FbWFpbFZhbGlkYXRvci5qcyIsInZhbGlkYXRpb24vVmFsaWRhdG9ycy9FbWFpbFZhbGlkYXRvci50cyJdLCJuYW1lcyI6WyJfX2V4dGVuZHMiLCJleHRlbmRTdGF0aWNzIiwiZCIsImIiLCJPYmplY3QiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIkFycmF5IiwicCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIlR5cGVFcnJvciIsIlN0cmluZyIsIl9fIiwiY29uc3RydWN0b3IiLCJjcmVhdGUiLCJfX2ltcG9ydERlZmF1bHQiLCJtb2QiLCJfX2VzTW9kdWxlIiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjb25zdGFudHNfMSIsInJlcXVpcmUiLCJQYXR0ZXJuVmFsaWRhdG9yXzEiLCJFbWFpbFZhbGlkYXRvciIsIl9zdXBlciIsIm1lc3NhZ2UiLCJERUZBVUxUX0VSUk9SX01FU1NBR0VTIiwiRU1BSUwiLCJWYWxpZGF0aW9uS2V5cyIsImhhc0Vycm9ycyIsImVtYWlsUGF0IiwiZGVmYXVsdCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsSUFBSUEsU0FBUyxHQUFJLFFBQVEsS0FBS0EsU0FBZCxJQUE2QixZQUFZO0FBQ3JELE1BQUlDLGFBQWEsR0FBRyxVQUFVQyxDQUFWLEVBQWFDLENBQWIsRUFBZ0I7QUFDaENGLElBQUFBLGFBQWEsR0FBR0csTUFBTSxDQUFDQyxjQUFQLElBQ1g7QUFBRUMsTUFBQUEsU0FBUyxFQUFFO0FBQWIsaUJBQTZCQyxLQUE3QixJQUFzQyxVQUFVTCxDQUFWLEVBQWFDLENBQWIsRUFBZ0I7QUFBRUQsTUFBQUEsQ0FBQyxDQUFDSSxTQUFGLEdBQWNILENBQWQ7QUFBa0IsS0FEL0QsSUFFWixVQUFVRCxDQUFWLEVBQWFDLENBQWIsRUFBZ0I7QUFBRSxXQUFLLElBQUlLLENBQVQsSUFBY0wsQ0FBZCxFQUFpQixJQUFJQyxNQUFNLENBQUNLLFNBQVAsQ0FBaUJDLGNBQWpCLENBQWdDQyxJQUFoQyxDQUFxQ1IsQ0FBckMsRUFBd0NLLENBQXhDLENBQUosRUFBZ0ROLENBQUMsQ0FBQ00sQ0FBRCxDQUFELEdBQU9MLENBQUMsQ0FBQ0ssQ0FBRCxDQUFSO0FBQWMsS0FGckc7O0FBR0EsV0FBT1AsYUFBYSxDQUFDQyxDQUFELEVBQUlDLENBQUosQ0FBcEI7QUFDSCxHQUxEOztBQU1BLFNBQU8sVUFBVUQsQ0FBVixFQUFhQyxDQUFiLEVBQWdCO0FBQ25CLFFBQUksT0FBT0EsQ0FBUCxLQUFhLFVBQWIsSUFBMkJBLENBQUMsS0FBSyxJQUFyQyxFQUNJLE1BQU0sSUFBSVMsU0FBSixDQUFjLHlCQUF5QkMsTUFBTSxDQUFDVixDQUFELENBQS9CLEdBQXFDLCtCQUFuRCxDQUFOO0FBQ0pGLElBQUFBLGFBQWEsQ0FBQ0MsQ0FBRCxFQUFJQyxDQUFKLENBQWI7O0FBQ0EsYUFBU1csRUFBVCxHQUFjO0FBQUUsV0FBS0MsV0FBTCxHQUFtQmIsQ0FBbkI7QUFBdUI7O0FBQ3ZDQSxJQUFBQSxDQUFDLENBQUNPLFNBQUYsR0FBY04sQ0FBQyxLQUFLLElBQU4sR0FBYUMsTUFBTSxDQUFDWSxNQUFQLENBQWNiLENBQWQsQ0FBYixJQUFpQ1csRUFBRSxDQUFDTCxTQUFILEdBQWVOLENBQUMsQ0FBQ00sU0FBakIsRUFBNEIsSUFBSUssRUFBSixFQUE3RCxDQUFkO0FBQ0gsR0FORDtBQU9ILENBZDJDLEVBQTVDOztBQWVBLElBQUlHLGVBQWUsR0FBSSxRQUFRLEtBQUtBLGVBQWQsSUFBa0MsVUFBVUMsR0FBVixFQUFlO0FBQ25FLFNBQVFBLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxVQUFaLEdBQTBCRCxHQUExQixHQUFnQztBQUFFLGVBQVdBO0FBQWIsR0FBdkM7QUFDSCxDQUZEOztBQUdBZCxNQUFNLENBQUNnQixjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUFFQyxFQUFBQSxLQUFLLEVBQUU7QUFBVCxDQUE3Qzs7QUNuQkEsSUFBQUMsV0FBQSxHQUFBQyxPQUFBLENBQUEsY0FBQSxDQUFBOztBQUVBLElBQUFDLGtCQUFBLEdBQUFSLGVBQUEsQ0FBQU8sT0FBQSxDQUFBLG9CQUFBLENBQUEsQ0FBQTs7QUFTQSxJQUFBRSxjQUFBLEdBQUEsVUFBQUMsTUFBQSxFQUFBO0FBQTRDM0IsRUFBQUEsU0FBQSxDQUFBMEIsY0FBQSxFQUFBQyxNQUFBLENBQUE7O0FBR3hDLFdBQUFELGNBQUEsQ0FBWUUsT0FBWixFQUEwRDtBQUE5QyxRQUFBQSxPQUFBLEtBQUEsS0FBQSxDQUFBLEVBQUE7QUFBQUEsTUFBQUEsT0FBQSxHQUFrQkwsV0FBQSxDQUFBTSxzQkFBQSxDQUF1QkMsS0FBekM7QUFBOEM7O0FEWXRELFdDWEFILE1BQUEsQ0FBQWhCLElBQUEsQ0FBQSxJQUFBLEVBQU1ZLFdBQUEsQ0FBQVEsY0FBQSxDQUFlRCxLQUFyQixFQUE0QkYsT0FBNUIsS0FBb0MsSURXcEM7QUNWSDs7QUFHREYsRUFBQUEsY0FBQSxDQUFBakIsU0FBQSxDQUFBdUIsU0FBQSxHQUFBLFVBQVVWLEtBQVYsRUFBeUJNLE9BQXpCLEVBQXlDO0FBQ3JDLFdBQU9ELE1BQUEsQ0FBQWxCLFNBQUEsQ0FBTXVCLFNBQU4sQ0FBZXJCLElBQWYsQ0FBZSxJQUFmLEVBQWdCVyxLQUFoQixFQUF1QkksY0FBYyxDQUFDTyxRQUF0QyxFQUFnREwsT0FBaEQsQ0FBUDtBQUNILEdBRkQ7O0FBUHdCRixFQUFBQSxjQUFBLENBQUFPLFFBQUEsR0FBbUIsdUlBQW5CO0FBVTVCLFNBQUFQLGNBQUE7QUFYQSxDQUFBLENBQTRDRCxrQkFBQSxDQUFBUyxPQUE1QyxDQUFBOztBRHVCQWIsT0FBTyxDQUFDYSxPQUFSLEdDdkJxQlIsY0R1QnJCIiwiZmlsZSI6InZhbGlkYXRpb24vVmFsaWRhdG9ycy9FbWFpbFZhbGlkYXRvci5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHNcIik7XG52YXIgUGF0dGVyblZhbGlkYXRvcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL1BhdHRlcm5WYWxpZGF0b3JcIikpO1xudmFyIEVtYWlsVmFsaWRhdG9yID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRW1haWxWYWxpZGF0b3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRW1haWxWYWxpZGF0b3IobWVzc2FnZSkge1xuICAgICAgICBpZiAobWVzc2FnZSA9PT0gdm9pZCAwKSB7IG1lc3NhZ2UgPSBjb25zdGFudHNfMS5ERUZBVUxUX0VSUk9SX01FU1NBR0VTLkVNQUlMOyB9XG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCBjb25zdGFudHNfMS5WYWxpZGF0aW9uS2V5cy5FTUFJTCwgbWVzc2FnZSkgfHwgdGhpcztcbiAgICB9XG4gICAgRW1haWxWYWxpZGF0b3IucHJvdG90eXBlLmhhc0Vycm9ycyA9IGZ1bmN0aW9uICh2YWx1ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5oYXNFcnJvcnMuY2FsbCh0aGlzLCB2YWx1ZSwgRW1haWxWYWxpZGF0b3IuZW1haWxQYXQsIG1lc3NhZ2UpO1xuICAgIH07XG4gICAgRW1haWxWYWxpZGF0b3IuZW1haWxQYXQgPSAvW2EtejAtOSEjJCUmJyorLz0/Xl9ge3x9fi1dKyg/OlxcLlthLXowLTkhIyQlJicqKy89P15fYHt8fX4tXSspKkAoPzpbYS16MC05XSg/OlthLXowLTktXSpbYS16MC05XSk/XFwuKStbYS16MC05XSg/OlthLXowLTktXSpbYS16MC05XSk/LztcbiAgICByZXR1cm4gRW1haWxWYWxpZGF0b3I7XG59KFBhdHRlcm5WYWxpZGF0b3JfMS5kZWZhdWx0KSk7XG5leHBvcnRzLmRlZmF1bHQgPSBFbWFpbFZhbGlkYXRvcjsiLCJpbXBvcnQge1ZhbGlkYXRpb25LZXlzLCBERUZBVUxUX0VSUk9SX01FU1NBR0VTfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5pbXBvcnQge0Vycm9yc30gZnJvbSBcIi4uL3R5cGVzXCI7XG5pbXBvcnQgUGF0dGVyblZhbGlkYXRvciBmcm9tIFwiLi9QYXR0ZXJuVmFsaWRhdG9yXCI7XG5cbi8qKlxuICogRW1haWwgVmFsaWRhdG9yXG4gKlxuICogQGNsYXNzIEVtYWlsVmFsaWRhdG9yXG4gKiBAZXh0ZW5kcyBQYXR0ZXJuVmFsaWRhdG9yXG4gKiBAbWVtYmVyT2YgVmFsaWRhdG9yc1xuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFbWFpbFZhbGlkYXRvciBleHRlbmRzIFBhdHRlcm5WYWxpZGF0b3Ige1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IGVtYWlsUGF0OiBSZWdFeHAgPSAvW2EtejAtOSEjJCUmJyorLz0/Xl9ge3x9fi1dKyg/OlxcLlthLXowLTkhIyQlJicqKy89P15fYHt8fX4tXSspKkAoPzpbYS16MC05XSg/OlthLXowLTktXSpbYS16MC05XSk/XFwuKStbYS16MC05XSg/OlthLXowLTktXSpbYS16MC05XSk/LztcblxuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2U6IHN0cmluZyA9IERFRkFVTFRfRVJST1JfTUVTU0FHRVMuRU1BSUwpe1xuICAgICAgICBzdXBlcihWYWxpZGF0aW9uS2V5cy5FTUFJTCwgbWVzc2FnZSlcbiAgICB9XG5cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgaGFzRXJyb3JzKHZhbHVlOiBzdHJpbmcsIG1lc3NhZ2U/OiBzdHJpbmcpOiBFcnJvcnMge1xuICAgICAgICByZXR1cm4gc3VwZXIuaGFzRXJyb3JzKHZhbHVlLCBFbWFpbFZhbGlkYXRvci5lbWFpbFBhdCwgbWVzc2FnZSk7XG4gICAgfVxufSJdfQ==
