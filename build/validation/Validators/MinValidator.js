"use strict";

var __extends = this && this.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var Validator_1 = __importDefault(require("./Validator"));

var constants_1 = require("../constants");

var MinValidator = function (_super) {
  __extends(MinValidator, _super);

  function MinValidator(message) {
    if (message === void 0) {
      message = constants_1.DEFAULT_ERROR_MESSAGES.MIN;
    }

    return _super.call(this, constants_1.ValidationKeys.MIN, message) || this;
  }

  MinValidator.prototype.hasErrors = function (value, min, message) {
    if (value === undefined) return;
    return value < min ? this.getMessage(message || this.message, min) : undefined;
  };

  return MinValidator;
}(Validator_1.default);

exports.default = MinValidator;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZhbGlkYXRpb24vVmFsaWRhdG9ycy9NaW5WYWxpZGF0b3IuanMiLCJ2YWxpZGF0aW9uL1ZhbGlkYXRvcnMvTWluVmFsaWRhdG9yLnRzIl0sIm5hbWVzIjpbIl9fZXh0ZW5kcyIsImV4dGVuZFN0YXRpY3MiLCJkIiwiYiIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQXJyYXkiLCJwIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiVHlwZUVycm9yIiwiU3RyaW5nIiwiX18iLCJjb25zdHJ1Y3RvciIsImNyZWF0ZSIsIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsIl9fZXNNb2R1bGUiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlZhbGlkYXRvcl8xIiwicmVxdWlyZSIsImNvbnN0YW50c18xIiwiTWluVmFsaWRhdG9yIiwiX3N1cGVyIiwibWVzc2FnZSIsIkRFRkFVTFRfRVJST1JfTUVTU0FHRVMiLCJNSU4iLCJWYWxpZGF0aW9uS2V5cyIsImhhc0Vycm9ycyIsIm1pbiIsInVuZGVmaW5lZCIsImdldE1lc3NhZ2UiLCJkZWZhdWx0Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxJQUFJQSxTQUFTLEdBQUksUUFBUSxLQUFLQSxTQUFkLElBQTZCLFlBQVk7QUFDckQsTUFBSUMsYUFBYSxHQUFHLFVBQVVDLENBQVYsRUFBYUMsQ0FBYixFQUFnQjtBQUNoQ0YsSUFBQUEsYUFBYSxHQUFHRyxNQUFNLENBQUNDLGNBQVAsSUFDWDtBQUFFQyxNQUFBQSxTQUFTLEVBQUU7QUFBYixpQkFBNkJDLEtBQTdCLElBQXNDLFVBQVVMLENBQVYsRUFBYUMsQ0FBYixFQUFnQjtBQUFFRCxNQUFBQSxDQUFDLENBQUNJLFNBQUYsR0FBY0gsQ0FBZDtBQUFrQixLQUQvRCxJQUVaLFVBQVVELENBQVYsRUFBYUMsQ0FBYixFQUFnQjtBQUFFLFdBQUssSUFBSUssQ0FBVCxJQUFjTCxDQUFkLEVBQWlCLElBQUlDLE1BQU0sQ0FBQ0ssU0FBUCxDQUFpQkMsY0FBakIsQ0FBZ0NDLElBQWhDLENBQXFDUixDQUFyQyxFQUF3Q0ssQ0FBeEMsQ0FBSixFQUFnRE4sQ0FBQyxDQUFDTSxDQUFELENBQUQsR0FBT0wsQ0FBQyxDQUFDSyxDQUFELENBQVI7QUFBYyxLQUZyRzs7QUFHQSxXQUFPUCxhQUFhLENBQUNDLENBQUQsRUFBSUMsQ0FBSixDQUFwQjtBQUNILEdBTEQ7O0FBTUEsU0FBTyxVQUFVRCxDQUFWLEVBQWFDLENBQWIsRUFBZ0I7QUFDbkIsUUFBSSxPQUFPQSxDQUFQLEtBQWEsVUFBYixJQUEyQkEsQ0FBQyxLQUFLLElBQXJDLEVBQ0ksTUFBTSxJQUFJUyxTQUFKLENBQWMseUJBQXlCQyxNQUFNLENBQUNWLENBQUQsQ0FBL0IsR0FBcUMsK0JBQW5ELENBQU47QUFDSkYsSUFBQUEsYUFBYSxDQUFDQyxDQUFELEVBQUlDLENBQUosQ0FBYjs7QUFDQSxhQUFTVyxFQUFULEdBQWM7QUFBRSxXQUFLQyxXQUFMLEdBQW1CYixDQUFuQjtBQUF1Qjs7QUFDdkNBLElBQUFBLENBQUMsQ0FBQ08sU0FBRixHQUFjTixDQUFDLEtBQUssSUFBTixHQUFhQyxNQUFNLENBQUNZLE1BQVAsQ0FBY2IsQ0FBZCxDQUFiLElBQWlDVyxFQUFFLENBQUNMLFNBQUgsR0FBZU4sQ0FBQyxDQUFDTSxTQUFqQixFQUE0QixJQUFJSyxFQUFKLEVBQTdELENBQWQ7QUFDSCxHQU5EO0FBT0gsQ0FkMkMsRUFBNUM7O0FBZUEsSUFBSUcsZUFBZSxHQUFJLFFBQVEsS0FBS0EsZUFBZCxJQUFrQyxVQUFVQyxHQUFWLEVBQWU7QUFDbkUsU0FBUUEsR0FBRyxJQUFJQSxHQUFHLENBQUNDLFVBQVosR0FBMEJELEdBQTFCLEdBQWdDO0FBQUUsZUFBV0E7QUFBYixHQUF2QztBQUNILENBRkQ7O0FBR0FkLE1BQU0sQ0FBQ2dCLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQUVDLEVBQUFBLEtBQUssRUFBRTtBQUFULENBQTdDOztBQ25CQSxJQUFBQyxXQUFBLEdBQUFOLGVBQUEsQ0FBQU8sT0FBQSxDQUFBLGFBQUEsQ0FBQSxDQUFBOztBQUNBLElBQUFDLFdBQUEsR0FBQUQsT0FBQSxDQUFBLGNBQUEsQ0FBQTs7QUFVQSxJQUFBRSxZQUFBLEdBQUEsVUFBQUMsTUFBQSxFQUFBO0FBQTBDM0IsRUFBQUEsU0FBQSxDQUFBMEIsWUFBQSxFQUFBQyxNQUFBLENBQUE7O0FBQ3RDLFdBQUFELFlBQUEsQ0FBWUUsT0FBWixFQUF3RDtBQUE1QyxRQUFBQSxPQUFBLEtBQUEsS0FBQSxDQUFBLEVBQUE7QUFBQUEsTUFBQUEsT0FBQSxHQUFrQkgsV0FBQSxDQUFBSSxzQkFBQSxDQUF1QkMsR0FBekM7QUFBNEM7O0FEY3BELFdDYkFILE1BQUEsQ0FBQWhCLElBQUEsQ0FBQSxJQUFBLEVBQU1jLFdBQUEsQ0FBQU0sY0FBQSxDQUFlRCxHQUFyQixFQUEwQkYsT0FBMUIsS0FBa0MsSURhbEM7QUNaSDs7QUFFREYsRUFBQUEsWUFBQSxDQUFBakIsU0FBQSxDQUFBdUIsU0FBQSxHQUFBLFVBQVVWLEtBQVYsRUFBeUJXLEdBQXpCLEVBQXNDTCxPQUF0QyxFQUFzRDtBQUNsRCxRQUFJTixLQUFLLEtBQUtZLFNBQWQsRUFDSTtBQUNKLFdBQU9aLEtBQUssR0FBR1csR0FBUixHQUFjLEtBQUtFLFVBQUwsQ0FBZ0JQLE9BQU8sSUFBSSxLQUFLQSxPQUFoQyxFQUF5Q0ssR0FBekMsQ0FBZCxHQUE4REMsU0FBckU7QUFDSCxHQUpEOztBQUtKLFNBQUFSLFlBQUE7QUFWQSxDQUFBLENBQTBDSCxXQUFBLENBQUFhLE9BQTFDLENBQUE7O0FEd0JBZixPQUFPLENBQUNlLE9BQVIsR0FBa0JWLFlBQWxCIiwiZmlsZSI6InZhbGlkYXRpb24vVmFsaWRhdG9ycy9NaW5WYWxpZGF0b3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgVmFsaWRhdG9yXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vVmFsaWRhdG9yXCIpKTtcbnZhciBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHNcIik7XG52YXIgTWluVmFsaWRhdG9yID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTWluVmFsaWRhdG9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1pblZhbGlkYXRvcihtZXNzYWdlKSB7XG4gICAgICAgIGlmIChtZXNzYWdlID09PSB2b2lkIDApIHsgbWVzc2FnZSA9IGNvbnN0YW50c18xLkRFRkFVTFRfRVJST1JfTUVTU0FHRVMuTUlOOyB9XG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCBjb25zdGFudHNfMS5WYWxpZGF0aW9uS2V5cy5NSU4sIG1lc3NhZ2UpIHx8IHRoaXM7XG4gICAgfVxuICAgIE1pblZhbGlkYXRvci5wcm90b3R5cGUuaGFzRXJyb3JzID0gZnVuY3Rpb24gKHZhbHVlLCBtaW4sIG1lc3NhZ2UpIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHJldHVybiB2YWx1ZSA8IG1pbiA/IHRoaXMuZ2V0TWVzc2FnZShtZXNzYWdlIHx8IHRoaXMubWVzc2FnZSwgbWluKSA6IHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIHJldHVybiBNaW5WYWxpZGF0b3I7XG59KFZhbGlkYXRvcl8xLmRlZmF1bHQpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IE1pblZhbGlkYXRvcjsiLCJpbXBvcnQgVmFsaWRhdG9yIGZyb20gXCIuL1ZhbGlkYXRvclwiO1xuaW1wb3J0IHtWYWxpZGF0aW9uS2V5cywgREVGQVVMVF9FUlJPUl9NRVNTQUdFU30gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuaW1wb3J0IHtFcnJvcnN9IGZyb20gXCIuLi90eXBlc1wiO1xuXG4vKipcbiAqIE1pbiBWYWxpZGF0b3JcbiAqXG4gKiBAY2xhc3MgTWluVmFsaWRhdG9yXG4gKiBAZXh0ZW5kcyBWYWxpZGF0b3JcbiAqIEBtZW1iZXJPZiBWYWxpZGF0b3JzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1pblZhbGlkYXRvciBleHRlbmRzIFZhbGlkYXRvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nID0gREVGQVVMVF9FUlJPUl9NRVNTQUdFUy5NSU4pe1xuICAgICAgICBzdXBlcihWYWxpZGF0aW9uS2V5cy5NSU4sIG1lc3NhZ2UpXG4gICAgfVxuXG4gICAgaGFzRXJyb3JzKHZhbHVlOiBudW1iZXIsIG1pbjogbnVtYmVyLCBtZXNzYWdlPzogc3RyaW5nKTogRXJyb3JzIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHJldHVybiB2YWx1ZSA8IG1pbiA/IHRoaXMuZ2V0TWVzc2FnZShtZXNzYWdlIHx8IHRoaXMubWVzc2FnZSwgbWluKSA6IHVuZGVmaW5lZDtcbiAgICB9XG59Il19
